generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum OrderStatus {
  DRAFT
  PENDING
  RESERVED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  KHALTI
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  OUT_OF_STOCK
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String?
  firstName    String
  lastName     String
  phone        String?
  avatar       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  updatedBy    Int?      @map("updated_by")
  lastLogin    DateTime?
  isActive     Boolean   @default(true)
  role         UserRole  @default(CUSTOMER)

  // Relations
  addresses             Address[]          @relation("AddressUser")
  updatedAddresses      Address[]          @relation("AddressUpdatedBy")
  orders                Order[]            @relation("OrderUser")
  updatedOrders         Order[]            @relation("OrderUpdatedBy")
  reviews               Review[]           @relation("ReviewUser")
  updatedReviews        Review[]           @relation("ReviewUpdatedBy")
  vendorProfile         Vendor?            @relation("VendorUser")
  updatedVendors        Vendor[]           @relation("VendorUpdatedBy")
  updatedCategories     Category[]         @relation("CategoryUpdatedBy")
  updatedProducts       Product[]          @relation("ProductUpdatedBy")
  updatedProductTags    ProductTag[]       @relation("ProductTagUpdatedBy")
  updatedProductImages  ProductImage[]     @relation("ProductImageUpdatedBy")
  updatedProductAttrs   ProductAttribute[] @relation("ProductAttributeUpdatedBy")
  updatedOrderItems     OrderItem[]        @relation("OrderItemUpdatedBy")
  updatedPayments       Payment[]          @relation("PaymentUpdatedBy")
  updatedShipments      Shipment[]         @relation("ShipmentUpdatedBy")
  updatedCommissions    Commission[]       @relation("CommissionUpdatedBy")
  updatedPayoutRequests PayoutRequest[]    @relation("PayoutRequestUpdatedBy")
  cart                  Cart?

  @@index([updatedBy])
}

model Vendor {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  businessName    String
  businessEmail   String    @unique
  businessPhone   String
  slug            String    @unique
  taxId           String?
  description     String?
  logo            String?
  banner          String?
  website         String?
  facebook        String?
  instagram       String?
  twitter         String?
  backgroundColor String?
  brandColor      String?
  isApproved      Boolean   @default(false)
  isAdminTeam     Boolean   @default(false)
  approvedAt      DateTime?
  rating          Float     @default(0)
  totalReviews    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?      @map("updated_by")

  user           User            @relation("VendorUser", fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]
  orderItems     OrderItem[]
  commissions    Commission[]
  payoutRequests PayoutRequest[]
  updated        User?           @relation("VendorUpdatedBy", fields: [updatedBy], references: [id])

  @@index([userId])
}

model Address {
  id            Int      @id @default(autoincrement())
  userId        Int
  label         String   @default("Home")
  recipientName String
  street        String
  city          String
  state         String
  postalCode    String
  country       String   @default("Nepal")
  phone         String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  updatedBy     Int?     @map("updated_by")

  user    User  @relation("AddressUser", fields: [userId], references: [id], onDelete: Cascade)
  updated User? @relation("AddressUpdatedBy", fields: [updatedBy], references: [id])

  @@index([userId])
}

model Category {
  id            Int      @id @default(autoincrement())
  name          String
  slug          String   @unique
  description   String?
  image         String?
  parentId      Int?
  isFeatured    Boolean  @default(false)
  featuredOrder Int?     @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  updatedBy     Int?     @map("updated_by")

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryToCategory")
  products Product[]
  updated  User?      @relation("CategoryUpdatedBy", fields: [updatedBy], references: [id])
}

model Product {
  id               Int           @id @default(autoincrement())
  vendorId         Int
  categoryId       Int
  name             String
  slug             String        @unique
  description      String
  shortDescription String?
  price            Decimal       @default(0.00)
  salePrice        Decimal?
  costPrice        Decimal?
  sku              String        @unique
  stockQuantity    Int           @default(0)
  status           ProductStatus @default(DRAFT)
  isFeatured       Boolean       @default(false)
  weight           Float?
  length           Float?
  width            Float?
  height           Float?
  rating           Float         @default(0)
  reviewCount      Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  updatedBy        Int?          @map("updated_by")

  vendor     Vendor?            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category   Category           @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  images     ProductImage[]
  attributes ProductAttribute[]
  reviews    Review[]
  tags       ProductTag[]
  orderItems OrderItem[]
  updated    User?              @relation("ProductUpdatedBy", fields: [updatedBy], references: [id])
  cartItems  CartItem[]

  @@index([vendorId])
  @@index([categoryId])
}

model ProductTag {
  id        Int      @id @default(autoincrement())
  productId Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy Int?     @map("updated_by")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  updated User?   @relation("ProductTagUpdatedBy", fields: [updatedBy], references: [id])

  @@index([productId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy Int?     @map("updated_by")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  updated User?   @relation("ProductImageUpdatedBy", fields: [updatedBy], references: [id])

  @@index([productId])
}

model ProductAttribute {
  id        Int      @id @default(autoincrement())
  productId Int
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy Int?     @map("updated_by")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  updated User?   @relation("ProductAttributeUpdatedBy", fields: [updatedBy], references: [id])

  @@index([productId])
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique
  userId          Int
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Decimal       @default(0.00)
  shippingFee     Decimal       @default(0.00)
  total           Decimal       @default(0.00)
  shippingAddress Json
  customerNote    String?
  completedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  updatedBy       Int?          @map("updated_by")

  user      User        @relation("OrderUser", fields: [userId], references: [id], onDelete: Restrict)
  updated   User?       @relation("OrderUpdatedBy", fields: [updatedBy], references: [id])
  items     OrderItem[]
  payments  Payment[]
  shipments Shipment[]

  @@index([userId])
}

model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  price           Decimal  @default(0.00)
  salePrice       Decimal?
  productSnapshot Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  updatedBy       Int?     @map("updated_by")

  order      Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product     @relation(fields: [productId], references: [id], onDelete: Restrict)
  reviews    Review[]
  commission Commission?
  updated    User?       @relation("OrderItemUpdatedBy", fields: [updatedBy], references: [id])
  Vendor     Vendor?     @relation(fields: [vendorId], references: [id])
  vendorId   Int?

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id             Int           @id @default(autoincrement())
  orderId        Int
  amount         Decimal       @default(0.00)
  method         PaymentMethod
  transactionId  String?
  status         PaymentStatus @default(PENDING)
  paymentDetails Json?
  processedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  updatedBy      Int?          @map("updated_by")

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  updated User? @relation("PaymentUpdatedBy", fields: [updatedBy], references: [id])

  @@index([orderId])
}

model Shipment {
  id             Int       @id @default(autoincrement())
  orderId        Int
  trackingNumber String
  carrier        String
  status         String    @default("pending")
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  updatedBy      Int?      @map("updated_by")

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  updated User? @relation("ShipmentUpdatedBy", fields: [updatedBy], references: [id])

  @@index([orderId])
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  orderItemId Int
  rating      Int
  title       String?
  comment     String?
  images      Json?
  isApproved  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   Int?     @map("updated_by")

  user      User      @relation("ReviewUser", fields: [userId], references: [id], onDelete: Cascade)
  updated   User?     @relation("ReviewUpdatedBy", fields: [updatedBy], references: [id])
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([orderItemId])
}

model Commission {
  id          Int      @id @default(autoincrement())
  vendorId    Int
  orderItemId Int?     @unique
  amount      Decimal  @default(0.00)
  rate        Float    @default(0.1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   Int?     @map("updated_by")

  vendor    Vendor     @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orderItem OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  updated   User?      @relation("CommissionUpdatedBy", fields: [updatedBy], references: [id])

  @@index([vendorId])
}

model PayoutRequest {
  id        Int      @id @default(autoincrement())
  vendorId  Int
  amount    Decimal  @default(0.00)
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy Int?     @map("updated_by")

  vendor  Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  updated User?  @relation("PayoutRequestUpdatedBy", fields: [updatedBy], references: [id])

  @@index([vendorId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
